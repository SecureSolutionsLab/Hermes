syntax = "proto3";

package zermia.coordinator;


service ZermiaCoordinatorServices{
	rpc FirstConnection (ConnectionRequest) returns (ConnectionReply) {}
	rpc SecondConnection (ConnectionSecondRequest) returns (ConnectionSecondReply) {}
	rpc FaultService (FaultActivationRequest) returns (FaultActivationReply) {}
	rpc StatsService (StatsRequest) returns (StatsReply) {}
	rpc Stat1SecService (Stat1SecRequest) returns (Stat1SecReply) {}
	rpc ClientFirstRequest (clientInitialRequest) returns (clientInitialReply) {}
	rpc ClientFaultService (clientFaultActivationRequest) returns (clientFaultActivationReply) {}
	
}

//----------------------------------------------------------------------------------//
message ConnectionRequest{ 
	string replicaID = 1;
	
}

message ConnectionReply{
	bool replicaStatus = 1;
	int32 faultScheduleSize = 2;
	repeated string faultRepList = 3;
	int32 groupSize = 4;
}

//----------------------------------------------------------------------------------//

message ConnectionSecondRequest{
	string replicaID = 1;
}

message ConnectionSecondReply{
	repeated bool messageTypes = 1;
}
//----------------------------------------------------------------------------------//
//----------------------------------------------------------------------------------//
message FaultActivationRequest{
	string replicaID = 1;
	int32 faultScheduleIterator = 2;
}
message FaultActivationReply{
	repeated string faultPam = 1; // more than one fault and parameter
	repeated string runTrigger = 2;
}
//----------------------------------------------------------------------------------//

message StatsRequest{
	string replicaID = 1;
	double timeFinal = 2;
	int32 messageTotal = 3;
}

message StatsReply{
}

//----------------------------------------------------------------------------------//

message Stat1SecRequest{
	string replicaID = 1;
	int32 message1Sec = 2;
	int32 message1Throughput = 3;
}

message Stat1SecReply{
	string teste = 1;
}

//----------------------------------------------------------------------------------//

message clientInitialRequest{
	bool t = 1;
}

message clientInitialReply{
	int32 faultyClientGroupSize = 1;
	int32 faultScheduleSize = 2;
	repeated string faultRepList = 3;
	int32 groupSizeReplicas = 4;
	repeated string repList = 5;
}

//----------------------------------------------------------------------------------//

message clientFaultActivationRequest{
	int32 faultScheduleIterator = 1;
}

message clientFaultActivationReply{
	repeated string faultPam = 1; // more than one fault and parameter
	repeated string runTrigger = 2;
}


