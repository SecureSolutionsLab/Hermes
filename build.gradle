plugins {
    id 'java'
    id 'idea'
    id 'distribution'
    id 'org.hidetake.ssh' version '2.10.1'

    //ADDED by JSoares -> needed to support gRPC
    id 'com.google.protobuf' version '0.9.1'

    //ADDED by JSoares -> needed to support AspectJ
    id "io.freefair.aspectj.post-compile-weaving" version "8.0.1"
}

group 'BFT-SMaRt'
version '2.0'

def grpcVersion = '1.43.0' // OS X AARCH 64
//def grpcVersion = '1.26.0'// LINUX x86_64
def protobufVersion = '3.18.0' // OS X AARCH 64
// def protobufVersion = '3.11.1'// LINUX x86_64
def protocVersion = protobufVersion
int nServers = 4
int nClients = 1

//ADDED by JSoares -> needed to define src dir for Aspects
//sourceSets.main.aspectj.srcDir "src/main/aspectj"
//sourceSets.main.java.srcDir "src/main/java"

//sourceSets.main.java.srcDirs = files()

compileJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    //options.compilerArgs << "-Xlint"
}

repositories {
    mavenCentral()
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    archivesBaseName='BFT-SMaRt'
    project.version="2.0"
}

ssh.settings {
    fileTransfer = 'scp'
}

remotes {
    master {
        host = '<ip>'
        user = '<username>'
        //password = '<password>'
        identity=file('<private key file>')
    }
}

//ADDED by JSoares -> generate gRPC sources
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }

    generatedFilesBaseDir = "$projectDir/build/generated/proto"

    clean {
        delete generatedFilesBaseDir
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    src {
        main {
            java {
                srcDirs 'src/main/java'
                //srcDirs 'src/main/java/zermia'
                //srcDirs "$projectDir/build/generated/proto/main/grpc"
                //srcDirs "$projectDir/build/generated/proto/main/java"
            }
        }
    }
}
// End

//startScripts.enabled = false

task coordinator(type: CreateStartScripts) {
    mainClass = 'zermia.coordinator.ZermiaCoordinatorMain'
    applicationName = 'ZermiaCoordinatorMain'
    outputDir = new File(project.buildDir, 'scripts/' + name)
    //classpath = startScripts.classpath
}

task remoteDeploy(dependsOn: installDist) {
    doLast {
        def fileSeparator = System.getProperty("file.separator")
        def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
        def target = '~/'
        ssh.run {
            session(remotes.master) {
                put from: src, into: target
            }
        }
    }
}

task localDeploy(dependsOn: installDist) {
    doLast {
        //int nServers = 8
        //int nClients = 1

        def fileSeparator = System.getProperty("file.separator")
        def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
        def workingDirectory = project.buildDir.name + fileSeparator + "local" + fileSeparator

        println ("Deploying project into ${workingDirectory}")

        for (i in 0..<nServers) {
            def target = workingDirectory + "rep${i}"
            copy {
                from src
                into target
            }
        }

        for (i in 0..<nClients) {
            def target = workingDirectory + "cli${i}"
            copy {
                from src
                into target
            }
        }

        copy {
            from project.projectDir.absolutePath + fileSeparator + "shadow.yaml"
            into workingDirectory
        }
    }
}

task setupIntegrationTestingEnvironment(dependsOn: installDist) {
    doFirst {
        //int nServers = 8
        //int nClients = 1

        def fileSeparator = System.getProperty("file.separator")
        def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
        def workingDirectory = project.buildDir.name + fileSeparator + "integration" + fileSeparator
        copy {
            from src + fileSeparator + "lib"
            into workingDirectory + fileSeparator + "lib"
        }
        copy {
            from project.projectDir.absolutePath + fileSeparator + "config" + fileSeparator + "benchmark.config"
            into workingDirectory
        }

        for (i in 0..<nServers) {
            def target = workingDirectory + "rep${i}"
            copy {
                from src
                into target
            }
        }

        for (i in 0..<nClients) {
            def target = workingDirectory + "cli${i}"
            copy {
                from src
                into target
            }
        }
    }
}

task recoveryIntegrationTest(type: JavaExec, dependsOn: setupIntegrationTestingEnvironment) {
    //int nServers = 4
    //int nClients = 1
    def fileSeparator = System.getProperty("file.separator")
    String workingDirectory = project.buildDir.absolutePath + fileSeparator + "integration" + fileSeparator
    classpath = sourceSets.main.runtimeClasspath
    args(workingDirectory, nServers, nClients)
    mainClass = 'bftsmart.tests.recovery.RecoveryTest'
}

distributions {
    main {
        contents {
            into('config') {
                from 'config'
            }
            into('lib') {
                from jar
                from(configurations.runtimeClasspath)
            }
            from 'runscripts/smartrun.sh'
            from 'runscripts/smartrun.cmd'
            from 'runscripts/startReplicaYCSB.sh'
            from 'runscripts/ycsbClient.sh'
            from 'runscripts/ycsb.sh'
            from 'runscripts/startCoordinator.sh'

            //ADDED by JSoares -> copy Zermia configuration file into build/install/library
            from 'coordinator.config'
            from 'schedule.yaml'
            from 'schedule.json'
        }
    }
}

dependencies {
    implementation fileTree('lib'){include '*.jar'}
    // https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.69'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    implementation 'org.bouncycastle:bcprov-jdk15on:1.69'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.15'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation 'ch.qos.logback:logback-core:1.2.5'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation 'ch.qos.logback:logback-classic:1.2.5'

    // https://mvnrepository.com/artifact/io.netty/netty-all
    implementation 'io.netty:netty-all:4.1.67.Final'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:1.7.32'

    /*
    ADDED by JSoares: support gRPC
     */
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation 'javax.annotation:javax.annotation-api:1.3.1'

    /*
    ADDED by JSoares: support Zermia Fault, i.e., Aspect
     */
    // https://mvnrepository.com/artifact/org.aspectj/aspectjtools
    implementation 'org.aspectj:aspectjtools:1.9.19'
    // https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    implementation 'org.aspectj:aspectjrt:1.9.19'
    // https://mvnrepository.com/artifact/org.aspectj/aspectjweaver
    implementation 'org.aspectj:aspectjweaver:1.9.19'


    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation 'org.apache.poi:poi-ooxml:5.1.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.15.0'

}